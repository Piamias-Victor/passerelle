
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.NoticeScalarFieldEnum = {
  productUuid: 'productUuid',
  url: 'url'
};

exports.Prisma.ProductScalarFieldEnum = {
  uuid: 'uuid',
  availableStock: 'availableStock',
  name: 'name',
  miniatureHash: 'miniatureHash',
  cip7: 'cip7',
  cip13: 'cip13',
  ean13: 'ean13',
  priceWithoutTax: 'priceWithoutTax',
  percentTaxRate: 'percentTaxRate',
  laboratoryUuid: 'laboratoryUuid',
  description: 'description',
  instructionsForUse: 'instructionsForUse',
  composition: 'composition',
  weight: 'weight',
  maxQuantityForOrder: 'maxQuantityForOrder',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.LocationScalarFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  order: 'order'
};

exports.Prisma.ProductLocationScalarFieldEnum = {
  locationUuid: 'locationUuid',
  productUuid: 'productUuid',
  value: 'value'
};

exports.Prisma.ImageScalarFieldEnum = {
  hash: 'hash',
  name: 'name',
  url: 'url',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  imageHash: 'imageHash',
  productUuid: 'productUuid'
};

exports.Prisma.CategoryScalarFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  parentUuid: 'parentUuid',
  miniatureHash: 'miniatureHash',
  imageHash: 'imageHash',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.PromotionScalarFieldEnum = {
  uuid: 'uuid',
  amount: 'amount',
  type: 'type',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  categoryUuid: 'categoryUuid',
  productUuid: 'productUuid'
};

exports.Prisma.ProductPromotionScalarFieldEnum = {
  productUuid: 'productUuid',
  promotionUuid: 'promotionUuid'
};

exports.Prisma.DeliveryMethodScalarFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  priceRanges: 'priceRanges',
  type: 'type',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  carrier_uuid: 'carrier_uuid'
};

exports.Prisma.DeliveryScalarFieldEnum = {
  uuid: 'uuid',
  orderUuid: 'orderUuid',
  price: 'price',
  pickupId: 'pickupId',
  trackingNumber: 'trackingNumber',
  direction: 'direction',
  weight: 'weight',
  status: 'status',
  methodUuid: 'methodUuid',
  senderAddressUuid: 'senderAddressUuid',
  senderPhoneUuid: 'senderPhoneUuid',
  senderEmailUuid: 'senderEmailUuid',
  receiverAddressUuid: 'receiverAddressUuid',
  receiverPhoneUuid: 'receiverPhoneUuid',
  receiverEmailUuid: 'receiverEmailUuid',
  data: 'data',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  pickingDate: 'pickingDate'
};

exports.Prisma.PaymentScalarFieldEnum = {
  uuid: 'uuid',
  orderUuid: 'orderUuid',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.OrderLineScalarFieldEnum = {
  productUuid: 'productUuid',
  orderUuid: 'orderUuid',
  priceWithoutTax: 'priceWithoutTax',
  percentTaxRate: 'percentTaxRate',
  expectedQuantity: 'expectedQuantity',
  preparedQuantity: 'preparedQuantity',
  promotionUuid: 'promotionUuid',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.MediaScalarFieldEnum = {
  uuid: 'uuid',
  data: 'data',
  type: 'type',
  name: 'name'
};

exports.Prisma.OrderScalarFieldEnum = {
  uuid: 'uuid',
  deliveryAddressUuid: 'deliveryAddressUuid',
  billingAddressUuid: 'billingAddressUuid',
  phoneUuid: 'phoneUuid',
  emailUuid: 'emailUuid',
  idPasserelle: 'idPasserelle',
  customerUuid: 'customerUuid',
  customerMessage: 'customerMessage',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  promotion_discount: 'promotion_discount',
  promotion_code_uuid: 'promotion_code_uuid'
};

exports.Prisma.LaboratoryScalarFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  imageHash: 'imageHash',
  miniatureHash: 'miniatureHash',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.MessageScalarFieldEnum = {
  uuid: 'uuid',
  data: 'data',
  type: 'type',
  status: 'status',
  orderUuid: 'orderUuid',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CustomerScalarFieldEnum = {
  uuid: 'uuid',
  email: 'email',
  phoneUuid: 'phoneUuid',
  firstname: 'firstname',
  lastname: 'lastname',
  addressUuid: 'addressUuid'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  invoiceNumber: 'invoiceNumber',
  orderUuid: 'orderUuid',
  data: 'data',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.TokenScalarFieldEnum = {
  name: 'name',
  value: 'value',
  year: 'year',
  format: 'format'
};

exports.Prisma.BannerScalarFieldEnum = {
  uuid: 'uuid',
  imageHash: 'imageHash',
  order: 'order',
  isActive: 'isActive',
  href: 'href',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CarriersScalarFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  type: 'type',
  created_at: 'created_at',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by: 'updated_by'
};

exports.Prisma.Newsletter_subscriptionsScalarFieldEnum = {
  uuid: 'uuid',
  email: 'email',
  customerUuid: 'customerUuid',
  subscribedAt: 'subscribedAt',
  unsubscribedAt: 'unsubscribedAt'
};

exports.Prisma.Promotion_codesScalarFieldEnum = {
  code: 'code',
  amount: 'amount',
  reductionType: 'reductionType',
  scope: 'scope',
  startDate: 'startDate',
  endDate: 'endDate',
  currentUses: 'currentUses',
  conditions: 'conditions',
  created_at: 'created_at',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by: 'updated_by',
  uuid: 'uuid'
};

exports.Prisma.TagsScalarFieldEnum = {
  productUuid: 'productUuid',
  value: 'value'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ProductStatus = exports.$Enums.ProductStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ARCHIVED: 'ARCHIVED'
};

exports.ReductionType = exports.$Enums.ReductionType = {
  FIXED: 'FIXED',
  PERCENTAGE: 'PERCENTAGE'
};

exports.DeliveryMethodType = exports.$Enums.DeliveryMethodType = {
  CLICKANDCOLLECT: 'CLICKANDCOLLECT',
  DELIVERY: 'DELIVERY'
};

exports.DeliveryDirection = exports.$Enums.DeliveryDirection = {
  FORWARD: 'FORWARD',
  RETURN: 'RETURN'
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  CREATED: 'CREATED',
  PREPARED: 'PREPARED',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELED: 'CANCELED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  WAITINGFORPAYMENT: 'WAITINGFORPAYMENT',
  PAYED: 'PAYED',
  REJECTED: 'REJECTED'
};

exports.OrderLineStatus = exports.$Enums.OrderLineStatus = {
  CREATED: 'CREATED',
  STARTED: 'STARTED',
  PREPARED: 'PREPARED',
  CANCELED: 'CANCELED'
};

exports.MediaType = exports.$Enums.MediaType = {
  Address: 'Address',
  Phone: 'Phone',
  Email: 'Email'
};

exports.MessageType = exports.$Enums.MessageType = {
  PREPARATION_MESSAGE: 'PREPARATION_MESSAGE',
  ORDER_MESSAGE: 'ORDER_MESSAGE',
  ADMIN_MESSAGE: 'ADMIN_MESSAGE'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  CREATED: 'CREATED',
  SENT: 'SENT',
  SEND_ERROR: 'SEND_ERROR'
};

exports.CarrierType = exports.$Enums.CarrierType = {
  COLISSIMO: 'COLISSIMO',
  DPD: 'DPD',
  NONE: 'NONE'
};

exports.Prisma.ModelName = {
  Notice: 'Notice',
  Product: 'Product',
  Location: 'Location',
  ProductLocation: 'ProductLocation',
  Image: 'Image',
  ProductImage: 'ProductImage',
  Category: 'Category',
  Promotion: 'Promotion',
  ProductCategory: 'ProductCategory',
  ProductPromotion: 'ProductPromotion',
  DeliveryMethod: 'DeliveryMethod',
  Delivery: 'Delivery',
  Payment: 'Payment',
  OrderLine: 'OrderLine',
  Media: 'Media',
  Order: 'Order',
  Laboratory: 'Laboratory',
  Message: 'Message',
  Customer: 'Customer',
  Invoice: 'Invoice',
  Token: 'Token',
  Banner: 'Banner',
  carriers: 'carriers',
  newsletter_subscriptions: 'newsletter_subscriptions',
  promotion_codes: 'promotion_codes',
  tags: 'tags'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
